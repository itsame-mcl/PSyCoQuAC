@startuml "classes_business"
skinparam classAttributeIconSize 0
hide empty members

class BusinessObjects.FicheAdresse {
    <<get>> -fiche_id : Integer
    <<get/set>> -agent_id : Integer
    <<get/set>> -lot_id : Integer
    <<get>> -code_res : String
    {field} <<get>> -adresse_initiale : Dict{numero, voie, code_postal, ville}
    {field} <<get/set>> -adresse_finale : Dict{numero, voie, code_postal, ville}
    {field} <<get/set>> -coords_WGS84 : Tuple(longitude, latitude)
    <<get/set>> -champs_supplementaires : Dict{}
    +bool modifier_code_res(String nouveau_code)
    +String generer_adresse_requete()
}
abstract BusinessObjects.Agent {
    <<get>> -agent_id : Integer
    <<get>> -nom_utilisateur : String
    {field} <<get/set>> -identite : Tuple(prenom, nom)
}
class BusinessObjects.Superviseur {
    <<get>> -equipe_deleguee_a : Integer
}
class BusinessObjects.Gestionnaire {
    <<get>> -superviseur_id : Integer
}
BusinessObjects.Agent <|-- BusinessObjects.Superviseur
BusinessObjects.Agent <|-- BusinessObjects.Gestionnaire
class BusinessObjects.Modele {
    <<get>> -nom_modele : String
    <<get>> -regex_nom_fichier : RE
    <<get>> -correspondances : Dict{champ: position}
}
class BusinessObjects.Session {
    <<get>> -utilisateur_connecte : Agent
    +bool droits_superviseur()
}

class LocalServices.TraitementsFA.AffectationService << (S,#FF7700) Singleton >> {
    -List[FicheAdresse] echantillonner_fiches(List[FicheAdresse] echantillon,
    Integer taille_echantillon)
    +bool appliquer_repartition(Session session_utilisateur,
    Dict {Integer id_agent, Integer fiches_affectees} repartition)
}
class LocalServices.TraitementsFA.ControleRepriseService << (S,#FF7700) Singleton >> {
    +Tuple consulter_fiche(Session session_utilisateur,
    FicheAdresse fiche, bool etat_final)
    +FicheAdresse modifier_fiche(Session session_utilisateur,
    FicheAdresse fiche, Dict{} nouvelles_informations)
    +List[FicheAdresse] consulter_pot(Session session_utilisateur)
}

abstract LocalServices.IO.ImportationService {
    +List[FicheAdresse] importer_lot(Session session_utilisateur,
    String chemin_vers_fichier, Modele modele_a_utiliser)
}
class LocalServices.IO.ImportationCSV << (S,#FF7700) Singleton >>
LocalServices.IO.ImportationService <|-- LocalServices.IO.ImportationCSV
abstract LocalServices.IO.ExportationService {
    +bool exporter_lot(Session session_utilisateur, Integer id_lot,
    String chemin_vers_fichier)
}
class LocalServices.IO.ExportationCSV << (S,#FF7700) Singleton >>
LocalServices.IO.ExportationService <|-- LocalServices.IO.ExportationCSV
class LocalServices.IO.ModeleService << (S,#FF7700) Singleton >> {
    +Modele creer_modele(Session session_utilisateur, String nom_modele,
    RE regex_nom_fichier, Dict correspondances)
    +Modele modifier_modele(Session session_utilisateur, Modele modele_modif,
    String nom_modele, RE regex_nom_fichier, Dict correspondances)
    +bool supprimer_modele(Session session_utilisateur, Modele modele_a_suppr)
    +Modele chercher_modele(Session session_utilisateur, String nom_fichier)
}

class LocalServices.Gestion.SessionService << (S,#FF7700) Singleton >> {
    +Session ouvrir_session(string nom_utilisateur,
    string mot_de_passe)
    +bool fermer_session(Session session_a_fermer)
}
class LocalServices.Gestion.AgentService << (S,#FF7700) Singleton >> {
    +Agent creer_agent(Session session_utilisateur, string prenom, string nom,
    string nom_utilisateur, string mot_de_passe, bool est_superviseur)
    +Agent modifier_agent(Session session_utilsateur, Agent agent_a_modifier,
    string prenom, string nom, string mot_de_passe)
    +Agent changer_droits(Session session_utilisateur,
    Agent agent_a_modifier)
    +bool supprimer_agent(Session session_utilisateur,
    Agent agent_a_supprimer)
}
class LocalServices.Gestion.StatistiquesService << (S,#FF7700) Singleton >> {
    +Dict{} fiches_par_agent(Session session_utilisateur)
    +Dict{} fiches_par_lot(Session session_utilisateur)
    +Dict{} fiches_par_code_res(Session session_utilisateur)
    }

class WebServices.BANClient << (S,#FF7700) Singleton >> {
    +FicheAdresse geocodage_par_fiche(Session session_utilisateur,
    FicheAdresse fiche_a_traiter)
    +FicheAdresse reverse_par_fiche(Session session_utilisateur,
    FicheAdresse fiche_a_traiter)
    +List[FicheAdresse] geocodage_par_lot(Session session_utilisateur,
    List[FicheAdresse] fiches_a_traiter)
    +List[FicheAdresse] reverse_par_lot(Session session_utilisateur,
    List[FicheAdresse] fiches_a_traiter)
}

BusinessObjects.FicheAdresse -- LocalServices.TraitementsFA.AffectationService
BusinessObjects.FicheAdresse -- LocalServices.TraitementsFA.ControleRepriseService
BusinessObjects.FicheAdresse -- LocalServices.IO.ImportationService
BusinessObjects.FicheAdresse -- LocalServices.IO.ExportationService
BusinessObjects.FicheAdresse -- WebServices.BANClient
BusinessObjects.Agent -- LocalServices.Gestion.AgentService
BusinessObjects.Session o-- BusinessObjects.Agent
BusinessObjects.Session -- LocalServices.TraitementsFA.AffectationService
BusinessObjects.Session -- LocalServices.TraitementsFA.ControleRepriseService
BusinessObjects.Session -- LocalServices.IO.ImportationService
BusinessObjects.Session -- LocalServices.IO.ExportationService
BusinessObjects.Session -- LocalServices.IO.ModeleService
BusinessObjects.Session -- LocalServices.Gestion.SessionService
BusinessObjects.Session -- LocalServices.Gestion.AgentService
BusinessObjects.Session -- LocalServices.Gestion.StatistiquesService
BusinessObjects.Session -- WebServices.BANClient
BusinessObjects.Modele -- LocalServices.IO.ModeleService
BusinessObjects.Modele -- LocalServices.IO.ImportationService

BusinessObjects.Agent -[hidden]--> LocalServices.TraitementsFA.AffectationService
@enduml