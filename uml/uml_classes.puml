@startuml "uml_classes"
skinparam groupInheritance 2
skinparam classAttributeIconSize 0
skinparam linetype ortho
hide empty members

abstract ViewLayer.CLI.AbstractView {
    +void display_info()
    {abstract} +void make_choice()
}

class ViewLayer.CLI.ConnexionView {
    -questions : list
    -prompt_reessayer: list
}

ViewLayer.CLI.ConnexionView -- ViewLayer.CLI.MenuPrincipalView
ViewLayer.CLI.ConnexionView -- ViewLayer.CLI.Session
ViewLayer.CLI.ConnexionView -- ViewLayer.CLI.StartView
ViewLayer.CLI.ConnexionView -- BusinessLayer.BusinessObjects.Agent
ViewLayer.CLI.ConnexionView -- BusinessLayer.LocalServices.Gestion.SessionService

class ViewLayer.CLI.ConsulterPotView {
    -id_agent : int
    -delete_on_commit: bool
    -pot: List[FicheAdresse]
    -curseur: int
    -caller: AbstractView
}

ViewLayer.CLI.ConsulterPotView -- ViewLayer.CLI.MenuPrincipalView
ViewLayer.CLI.ConsulterPotView -- ViewLayer.CLI.ControlerView
ViewLayer.CLI.ConsulterPotView -- ViewLayer.CLI.ReprendreView
ViewLayer.CLI.ConsulterPotView -- ViewLayer.CLI.Session
ViewLayer.CLI.ConsulterPotView -- BusinessLayer.LocalServices.TraitementFA.ControleRepriseService


class ViewLayer.CLI.ControlerView {
    -fiche : FicheAdresse
    -questions : list
    -questions2 : list
}

ViewLayer.CLI.ControlerView -- BusinessLayer.BusinessObjects.FicheAdresse
ViewLayer.CLI.ControlerView -- BusinessLayer.LocalServices.TraitementFA.ControleRepriseService

class ViewLayer.CLI.DeleguerView {
    -equipe : List[Agent]
    -delegues : List[Gestionnaire]
    -superviseurs : List[Superviseur]
    -questions : list
    {static} -list prompt_gestionnaires(List[Gestionnaire])
    {static} -list prompt_superviseur(List[Superviseur])
}

ViewLayer.CLI.DeleguerView -- BusinessLayer.BusinessObjects.Gestionnaire
ViewLayer.CLI.DeleguerView -- BusinessLayer.BusinessObjects.Superviseur
ViewLayer.CLI.DeleguerView -- BusinessLayer.LocalServices.Gestion.AgentService
ViewLayer.CLI.DeleguerView -- ViewLayer.CLI.Session

class ViewLayer.CLI.GestionEquipeView {
    -questions : list
    -continue : list
    {static} -list prompt_agent()
}

ViewLayer.CLI.GestionEquipeView -- ViewLayer.CLI.DeleguerView
ViewLayer.CLI.GestionEquipeView -- ViewLayer.CLI.NouvelUtilisateurView
ViewLayer.CLI.GestionEquipeView -- ViewLayer.CLI.ModifierAgentView
ViewLayer.CLI.GestionEquipeView -- ViewLayer.CLI.ConsulterPotView
ViewLayer.CLI.GestionEquipeView -- ViewLayer.CLI.Session
ViewLayer.CLI.GestionEquipeView -- ViewLayer.CLI.MenuPrincipalView
ViewLayer.CLI.GestionEquipeView -- BusinessLayer.LocalServices.Gestion.AgentService

class ViewLayer.CLI.ImportExportView {
    -questions : list
    -import : list
    -export : list
    -validation_modele : list
    -appel_api : list
    -void importation()
    -void traitement_api(int)

}

ViewLayer.CLI.ImportExportView -- BusinessLayer.LocalServices.IO.ImportationService
ViewLayer.CLI.ImportExportView -- BusinessLayer.LocalServices.IO.ExportationService
ViewLayer.CLI.ImportExportView -- BusinessLayer.LocalServices.TraitementFA.ModeleService
ViewLayer.CLI.ImportExportView -- BusinessLayer.LocalServices.Gestion.StatistiqueService
ViewLayer.CLI.ImportExportView -- ViewLayer.CLI.NouveauModeleView
ViewLayer.CLI.ImportExportView -- ViewLayer.CLI.Session
ViewLayer.CLI.ImportExportView -- ViewLayer.CLI.MenuPrincipalView

class ViewLayer.CLI.MenuPrincipalView {
    -questions : list
}

ViewLayer.CLI.MenuPrincipalView -- ViewLayer.CLI.ModifierAgentView
ViewLayer.CLI.MenuPrincipalView -- ViewLayer.CLI.RepartirView
ViewLayer.CLI.MenuPrincipalView -- ViewLayer.CLI.StartView
ViewLayer.CLI.MenuPrincipalView -- ViewLayer.CLI.Session
ViewLayer.CLI.MenuPrincipalView -- BusinessLayer.LocalServices.Gestion.SessionService

class ViewLayer.CLI.ModifierAgentView {
    -agent : Agent
    -modal : bool
    -main_prompt : list
    -continue_prompt : list
}

ViewLayer.CLI.ModifierAgentView -- BusinessLayer.BusinessObjects.Agent
ViewLayer.CLI.ModifierAgentView -- BusinessLayer.BusinessObjects.Gestionnaire
ViewLayer.CLI.ModifierAgentView -- BusinessLayer.LocalServices.Gestion.AgentService
ViewLayer.CLI.ModifierAgentView -- ViewLayer.CLI.Session

class ViewLayer.CLI.NouveauModeleView {
    -questions : list
    -champs_sup : list
    -infos_sup : list
    {static} -Tuple(int) filter_champs(Any)

}

ViewLayer.CLI.NouveauModeleView -- BusinessLayer.LocalServices.TraitementFA.ModeleService

class ViewLayer.CLI.NouvelUtilisateurView {
    -on_setup : bool
    -questions : list
    {static} -bool role_filter(str)
}

ViewLayer.CLI.NouvelUtilisateurView -- BusinessLayer.LocalServices.Gestion.AgentService
ViewLayer.CLI.NouvelUtilisateurView -- ViewLayer.CLI.Session

class ViewLayer.CLI.RepartirView {
    -liste_lots : List[int]
    {static} -void display_repartition(dict)
}

ViewLayer.CLI.RepartirView -- BusinessLayer.LocalServices.Gestion.AgentService
ViewLayer.CLI.RepartirView -- BusinessLayer.LocalServices.TraitementFA.AffectationService

class ViewLayer.CLI.ReprendreView {
    -fiche : FicheAdresse
    -questions : list
    -oui_non : list
    -void choix_modifier_adresse()
    -void choix_modifier_wgs84()
    -void soumettre_api()
    -bool confirmation()
}

ViewLayer.CLI.ReprendreView -- BusinessLayer.BusinessObjects.Adresse
ViewLayer.CLI.ReprendreView -- BusinessLayer.BusinessObjects.FicheAdresse
ViewLayer.CLI.ReprendreView -- BusinessLayer.WebServices.BANClient
ViewLayer.CLI.ReprendreView -- BusinessLayer.LocalServices.TraitementFA.ControleRepriseService

class ViewLayer.CLI.StartView {
    -questions : list
}

class ViewLayer.CLI.SetupView {
    -base_path : str
    -first_try : bool
    -choix_installation : bool
    -questions : list
    {static} -bool install_filter(str)
}

ViewLayer.CLI.SetupView -- ViewLayer.CLI.NouvelUtilisateurView
ViewLayer.CLI.SetupView -- DataLayer.DAO.DBConnexion

ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.ConnexionView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.ConsulterPotView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.ControlerView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.DeleguerView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.GestionEquipeView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.ImportExportView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.MenuPrincipalView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.ModifierAgentView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.NouveauModeleView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.NouvelUtilisateurView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.RepartirView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.ReprendreView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.StartView
ViewLayer.CLI.AbstractView <|-- ViewLayer.CLI.SetupView

class ViewLayer.CLI.Session << (S,#FF7700) Singleton >> {
    <<get/set>> -agent : Agent
    <<get>> -droits : bool
}

ViewLayer.CLI.Session -- BusinessLayer.BusinessObjects.Agent
ViewLayer.CLI.Session -- BusinessLayer.BusinessObjects.Superviseur

class BusinessLayer.BusinessObjects.AgentFactory {
    {static} from_dict(dict)
}

BusinessLayer.BusinessObjects.AgentFactory -- BusinessLayer.BusinessObjects.Superviseur
BusinessLayer.BusinessObjects.AgentFactory -- BusinessLayer.BusinessObjects.Gestionnaire

abstract BusinessLayer.BusinessObjects.Agent {
    <<get/set>> -agent_id : int
    <<get/set>> -prenom : str
    <<get/set>> -nom : str
    <<get/set>> -quotite : float
    +dict as_dict()
}

class BusinessLayer.BusinessObjects.Gestionnaire {
    <<get/set>> -superviseur_id : int
}

class BusinessLayer.BusinessObjects.Superviseur {}

BusinessLayer.BusinessObjects.Agent <|-- BusinessLayer.BusinessObjects.Superviseur
BusinessLayer.BusinessObjects.Agent <|-- BusinessLayer.BusinessObjects.Gestionnaire

class BusinessLayer.BusinessObjects.Adresse {
    <<get/set>> -numero : str
    <<get/set>> -agent_id : str
    <<get/set>> -lot_id : str
    <<get/set>> -code_res : str
}

class BusinessLayer.BusinessObjects.FicheAdresse {
    <<get>> -fiche_id : int
    <<get/set>> -agent_id : int
    <<get/set>> -lot_id : int
    <<get>> -date_importation : date
    <<get/set>> -date_modification : date
    <<get/set>> -code_res : str
    <<get>> -adresse_initiale : Adresse
    <<get/set>> -adresse_finale : Adresse
    {field} <<get/set>> -coords_WGS84 : Tuple(float, float)
    <<get/set>> -champs_supplementaires : dict
    +FicheAdresse from_dict(Dict)
    +dict as_dict()
}

BusinessLayer.BusinessObjects.FicheAdresse *-- BusinessLayer.BusinessObjects.Adresse

class BusinessLayer.BusinessObjects.Modele {
    <<get>> identifiant : int
    <<get/set>> -nom_modele : str
    <<get/set>> -regex_nom_fichier : str
    <<get/set>> -correspondances : Correspondance
    +Modele from_dict(dict)
    +dict as_dict()
}

class BusinessLayer.BusinessObjects.Correspondance {
    {field} <<get/set>> -position_numero : Tuple(int)
    {field} <<get/set>> -position_voie : Tuple(int)
    {field} <<get/set>> -position_cp : Tuple(int)
    {field} <<get/set>> -position_ville : Tuple(int)
    <<get/set>> - positions_supplementaires : dict
}

BusinessLayer.BusinessObjects.Modele *-- BusinessLayer.BusinessObjects.Correspondance

class BusinessLayer.LocalServices.Gestion.AgentService << (S,#FF7700) Singleton >> {
    {static} +bool creer_agent(bool, float, str, str str, str, int)
    {static} +bool modifier_agent(Agent)
    {static} +bool reinitialiser_identifiants(int, str, str)
    {static} +bool changer_identifiants(int, str, str, str, str)
    {static} +bool supprimer_agent(int)
    {static} +int recuperer_id_superviseur(int)
    {static} +List[Agent] recuperer_equipe(int)
    {static} +List[Gestionnaire] recuperer_liste_delegues(int)
    {static} +List[Superviseur] recuperer_liste_superviseurs()
    {static} +bool promouvoir_agent(int)
    {static} +bool deleguer_agent(int, int)
    {static} +bool transferer_agent(int, int)
    {static} +bool retroceder_agent(int)
    {static} +Agent recuperer_agent(int)
}

BusinessLayer.LocalServices.Gestion.AgentService -- BusinessLayer.BusinessObjects.AgentFactory
BusinessLayer.LocalServices.Gestion.AgentService -- BusinessLayer.BusinessObjects.Agent
BusinessLayer.LocalServices.Gestion.AgentService -- BusinessLayer.BusinessObjects.Gestionnaire
BusinessLayer.LocalServices.Gestion.AgentService -- BusinessLayer.BusinessObjects.Superviseur
BusinessLayer.LocalServices.Gestion.AgentService -- DataLayer.DAO.DAOAgent
BusinessLayer.LocalServices.Gestion.AgentService -- DataLayer.DAO.DAOFicheAdresse

class BusinessLayer.LocalServices.Gestion.SessionService << (S,#FF7700) Singleton >> {
    {static} +Agent ouvrir_session(str, str)
    {static} +void fermer_session()
}

BusinessLayer.LocalServices.Gestion.SessionService -- ViewLayer.CLI.Session
BusinessLayer.LocalServices.Gestion.SessionService -- DataLayer.DAO.DAOAgent

class BusinessLayer.LocalServices.Gestion.StatistiqueService << (S,#FF7700) Singleton >> {
    {static} +list fiches_par_agent()
    {static} +list fiches_par_lot()
    {static} +list fiches_par_code_res()
}

BusinessLayer.LocalServices.Gestion.StatistiqueService -- DataLayer.DAO.DAOFicheAdresse

abstract BusinessLayer.LocalServices.IO.AbstractHandler {
    {abstract} +List[FicheAdresse] import_from_file(str, int, int, Modele, str)
    {abstract} +bool export_to_file(List[FicheAdresse], str)
}

BusinessLayer.LocalServices.IO.AbstractHandler -- BusinessLayer.BusinessObjects.Modele
BusinessLayer.LocalServices.IO.AbstractHandler -- BusinessLayer.BusinessObjects.FicheAdresse

class BusinessLayer.LocalServices.IO.FactoryHandler {
    {static} +AbstractHandler get_handler_from_ext(str)
}

BusinessLayer.LocalServices.IO.FactoryHandler -- BusinessLayer.LocalServices.IO.CSVHandler

class BusinessLayer.LocalServices.IO.CSVHandler {}

BusinessLayer.LocalServices.IO.CSVHandler -- BusinessLayer.BusinessObjects.Adresse
BusinessLayer.LocalServices.IO.CSVHandler -- BusinessLayer.BusinessObjects.FicheAdresse
BusinessLayer.LocalServices.IO.CSVHandler -- BusinessLayer.BusinessObjects.Modele

BusinessLayer.LocalServices.IO.AbstractHandler <|-- BusinessLayer.LocalServices.IO.CSVHandler

class BusinessLayer.LocalServices.IO.ImportationService << (S,#FF7700) Singleton >> {
    {static} -bool filtre_fiche_importation(FicheAdresse)
    +Tuple(int, bool) importer_lot(int, str, Modele, bool)
    {static} +List[int] lots_a_traiter_api(int)
    {static} +bool traiter_lot_api(int, bool)
}

BusinessLayer.LocalServices.IO.ImportationService -- BusinessLayer.BusinessObjects.FicheAdresse
BusinessLayer.LocalServices.IO.ImportationService -- BusinessLayer.BusinessObjects.Modele
BusinessLayer.LocalServices.IO.ImportationService -- DataLayer.DAO.DAOFicheAdresse
BusinessLayer.LocalServices.IO.ImportationService -- BusinessLayer.WebServices.BANClient
BusinessLayer.LocalServices.IO.ImportationService -- BusinessLayer.LocalServices.IO.FactoryHandler

class BusinessLayer.LocalServices.IO.ExportationService << (S,#FF7700) Singleton >> {
    {static} +void exporter_lot(int, str)
}

BusinessLayer.LocalServices.IO.ExportationService -- BusinessLayer.LocalServices.IO.FactoryHandler
BusinessLayer.LocalServices.IO.ExportationService -- DataLayer.DAO.DAOFicheAdresse

BusinessLayer.LocalServices.IO.ImportationService *-- BusinessLayer.LocalServices.IO.AbstractHandler
BusinessLayer.LocalServices.IO.ExportationService *-- BusinessLayer.LocalServices.IO.AbstractHandler

class BusinessLayer.LocalServices.TraitementFA.AffectationService << (S,#FF7700) Singleton >> {
    {static} -dict repartir_selon_quotites(int, dict, dict, str, float, float)
    {static} -dict corriger_arrondis(int, dict, str)
    +dict proposer_repartition(int, List[int], float, float)
    {static} +Tuple(List[FicheAdresse], List[FicheAdresse]) echantilloner_fiches(List[FicheAdresse], int)
    +bool appliquer_repartition(int, dict, bool)
    {static} +List[int] lots_a_affecter(int)
}

BusinessLayer.LocalServices.TraitementFA.AffectationService -- DataLayer.DAO.DAOFicheAdresse
BusinessLayer.LocalServices.TraitementFA.AffectationService -- DataLayer.DAO.DAOAgent
BusinessLayer.LocalServices.TraitementFA.AffectationService -- BusinessLayer.BusinessObjects.FicheAdresse

class BusinessLayer.LocalServices.TraitementFA.ControleRepriseService << (S,#FF7700) Singleton >> {
    {static} +FicheAdresse consulter_fiche(int)
    {static} +bool modifier_fiche(consulter_fiche)
    {static} +bool validation_fiche(FicheAdresse, bool)
    {static} +List[FicheAdresse] consulter_pot(int)
    {static} +List[FicheAdresse] consulter_pot_controle_reprise(int, bool, bool)
}

BusinessLayer.LocalServices.TraitementFA.ControleRepriseService -- BusinessLayer.BusinessObjects.FicheAdresse
BusinessLayer.LocalServices.TraitementFA.ControleRepriseService -- DataLayer.DAO.DAOFicheAdresse

class BusinessLayer.LocalServices.TraitementFA.ModeleService << (S,#FF7700) Singleton >> {
    {static} +Modele identifier_modele(str)
    {static} +bool creer_modele(str, str, List[int], List[int], List[int], List[int], dict)
}

BusinessLayer.LocalServices.TraitementFA.ModeleService -- DataLayer.DAO.DAOModele
BusinessLayer.LocalServices.TraitementFA.ModeleService -- BusinessLayer.BusinessObjects.Correspondance
BusinessLayer.LocalServices.TraitementFA.ModeleService -- BusinessLayer.BusinessObjects.Modele

class BusinessLayer.WebServices.BANClient << (S,#FF7700) Singleton >> {
    {static} -FicheAdresse json_to_fa(dict)
    +Tuple(float, FicheAdresse) geocodage_par_fiche(FicheAdresse)
    +Tuple(float, FicheAdresse) reverse_par_fiche(FicheAdresse)
    {static} +List[FicheAdresse] geocodage_par_lot(List[FicheAdresse], float, bool)
}

BusinessLayer.WebServices.BANClient -- BusinessLayer.BusinessObjects.Adresse
BusinessLayer.WebServices.BANClient -- BusinessLayer.BusinessObjects.FicheAdresse

class DataLayer.DAO.InterfaceFactory << (S,#FF7700) Singleton >> {
    {static} +Interface get_interface(str)
}

DataLayer.DAO.InterfaceFactory -- DataLayer.DAO.PGConnexion
DataLayer.DAO.InterfaceFactory -- DataLayer.DAO.SQLiteConnexion
DataLayer.DAO.InterfaceFactory -- DataLayer.DAO.PGAgent
DataLayer.DAO.InterfaceFactory -- DataLayer.DAO.SQLiteAgent
DataLayer.DAO.InterfaceFactory -- DataLayer.DAO.PGFicheAdresse
DataLayer.DAO.InterfaceFactory -- DataLayer.DAO.SQLiteFicheAdresse
DataLayer.DAO.InterfaceFactory -- DataLayer.DAO.PGModele
DataLayer.DAO.InterfaceFactory -- DataLayer.DAO.SQLiteModele

class DataLayer.DAO.DBConnexion << (S,#FF7700) Singleton >> {
    -interface : InterfaceConnexion
    <<get>> -connexion : Connexion
}

DataLayer.DAO.DBConnexion -- DataLayer.DAO.InterfaceFactory

abstract DataLayer.DAO.InterfaceConnexion {
    {abstract} +ouvrir_connexion(str, str, str, str, str)
    {abstract} +fermer_connexion(Connexion)
}

class DataLayer.DAO.PGConnexion {}
class DataLayer.DAO.SQLiteConnexion {}

DataLayer.DAO.DBConnexion *-- DataLayer.DAO.InterfaceConnexion
DataLayer.DAO.InterfaceConnexion <|-- DataLayer.DAO.PGConnexion
DataLayer.DAO.InterfaceConnexion <|-- DataLayer.DAO.SQLiteConnexion

class DataLayer.DAO.DAOAgent << (S,#FF7700) Singleton >> {
    -interface : InterfaceAgent
    {static} -saler_hasher_mdp(str, str)
    +Agent recuperer_agent(int)
    +List[Superviseur] recuperer_liste_superviseurs()
    +List[Agent] recuperer_equipe(int)
    +List[Gestionnaire] recuperer_liste_delegues(int)
    +bool deleguer_agent(int, int)
    +bool retroceder_agent(int)
    +bool transferer_agent(int, int)
    +bool creer_agent(Agent, str, str)
    +bool modifier_agent(Agent)
    +bool supprimer_agent(int)
    +bool promouvoir_agent(int)
    +Agent connexion_agent(str, str)
    +bool modifier_identifiants(int, str, str)
    +float recuperer_quotite(int)
    +str recuperer_nom_utilisateur(int)
    +int recuperer_dernier_id_agent()
    +int recuperer_id_superviseur(int)
}

DataLayer.DAO.DAOAgent -- BusinessLayer.BusinessObjects.AgentFactory
DataLayer.DAO.DAOAgent -- BusinessLayer.BusinessObjects.Agent
DataLayer.DAO.DAOAgent -- BusinessLayer.BusinessObjects.Gestionnaire
DataLayer.DAO.DAOAgent -- BusinessLayer.BusinessObjects.Superviseur
DataLayer.DAO.DAOAgent -- DataLayer.DAO.InterfaceFactory

abstract DataLayer.DAO.InterfaceAgent {
    {abstract} +dict recuperer_agent(int)
    {abstract} +List[dict] recuperer_liste_agents(int, bool)
    {abstract} +bool supprimer_agent(int)
    {abstract} +bool creer_agent(dict)
    {abstract} +bool modifier_agent(dict)
    {abstract} +bool deleguer_agent(int, int)
    {abstract} +bool retroceder_agent(int)
    {abstract} +bool transferer_agent(int, int)
    {abstract} +bool promouvoir_agent(int)
    {abstract} +bool modifier_identifiants(int, str, str)
    {abstract} +bool verifier_identifiants(int, str, str)
    {abstract} +dict connexion_agent(str, str)
    {abstract} +float recuperer_quotite(int)
    {abstract} +str recuperer_nom_utilisateur(int)
    {abstract} +int recuperer_dernier_id_agent()
    {abstract} +int recuperer_id_superviseur(int)
}

class DataLayer.DAO.PGAgent {}

DataLayer.DAO.PGAgent -- DataLayer.DAO.DBConnexion

class DataLayer.DAO.SQLiteAgent {}

DataLayer.DAO.SQLiteAgent -- DataLayer.DAO.DBConnexion

DataLayer.DAO.DAOAgent *-- DataLayer.DAO.InterfaceAgent
DataLayer.DAO.InterfaceAgent <|-- DataLayer.DAO.PGAgent
DataLayer.DAO.InterfaceAgent <|-- DataLayer.DAO.SQLiteAgent

class DataLayer.DAO.DAOFicheAdresse << (S,#FF7700) Singleton >> {
    -interface : InterfaceFicheAdresse
    +FicheAdresse recuperer_fiche_adresse(int)
    +List[FicheAdresse] recuperer_pot(int)
    +List[FicheAdresse] recuperer_lot(int)
    +bool affecter_fiches_adresse(int, List[int])
    +bool creer_fiche_adresse(FicheAdresse)
    +bool creer_multiple_fiche_adresse(List[FicheAdresse])
    +bool modifier_fiche_adresse(FicheAdresse)
    +bool supprimer_fiche_adresse(int)
    +List[tuple] obtenir_statistiques(bool, bool, bool, int, int, str)
    +int recuperer_dernier_id_fa()
    +int recuperer_dernier_id_lot()
    +bool incrementer_id_lot()
}

DataLayer.DAO.DAOFicheAdresse -- BusinessLayer.BusinessObjects.FicheAdresse
DataLayer.DAO.DAOFicheAdresse -- DataLayer.DAO.InterfaceFactory

abstract DataLayer.DAO.InterfaceFicheAdresse {
    {abstract} +dict recuperer_fiche_adresse(int)
    {abstract} +List[dict] recuperer_liste_fiches_adresse(int, int)
    {abstract} +bool creer_fiche_adresse(dict)
    {abstract} +bool creer_multiple_fiche_adresse(List[FicheAdresse])
    {abstract} +bool modifier_fiche_adresse(dict)
    {abstract} +bool modifier_agent_fiches_adresse(int, List[int])
    {abstract} +bool supprimer_fiche_adresse(int)
    {abstract} +List[tuple] obtenir_statistiques(list)
    {static} -str obtenir_statistiques_request_helper(list)
    {abstract} +int recuperer_dernier_id_fa()
    {abstract} +int recuperer_dernier_id_lot()
    {abstract} +bool incrementer_id_lot()
}

class DataLayer.DAO.PGFicheAdresse {}

DataLayer.DAO.PGFicheAdresse -- DataLayer.DAO.DBConnexion

class DataLayer.DAO.SQLiteFicheAdresse {}

DataLayer.DAO.SQLiteFicheAdresse -- DataLayer.DAO.DBConnexion

DataLayer.DAO.DAOFicheAdresse *-- DataLayer.DAO.InterfaceFicheAdresse
DataLayer.DAO.InterfaceFicheAdresse <|-- DataLayer.DAO.PGFicheAdresse
DataLayer.DAO.InterfaceFicheAdresse <|-- DataLayer.DAO.SQLiteFicheAdresse

class DataLayer.DAO.DAOModele << (S,#FF7700) Singleton >> {
    -interface : InterfaceModele
    +Modele recuperer_modele(int)
    +dict recuperer_regex()
    +bool creer_modele(Modele)
    +bool modifier_modele(Modele)
    +bool supprimer_modele(int)
    +int recuperer_dernier_id_modele()
}

DataLayer.DAO.DAOModele -- BusinessLayer.BusinessObjects.Modele
DataLayer.DAO.DAOModele -- DataLayer.DAO.InterfaceFactory

abstract DataLayer.DAO.InterfaceModele {
    {abstract} +dict recuperer_modele(int)
    {abstract} +dict recuperer_regex()
    {abstract} +bool creer_modele(dict)
    {abstract} +bool modifier_modele(dict)
    {abstract} +bool supprimer_modele(int)
    {abstract} +int recuperer_dernier_id_modele()
}

class DataLayer.DAO.PGModele {}

DataLayer.DAO.PGModele -- DataLayer.DAO.DBConnexion

class DataLayer.DAO.SQLiteModele {}

DataLayer.DAO.SQLiteModele -- DataLayer.DAO.DBConnexion

DataLayer.DAO.DAOModele *-- DataLayer.DAO.InterfaceModele
DataLayer.DAO.InterfaceModele <|-- DataLayer.DAO.PGModele
DataLayer.DAO.InterfaceModele <|-- DataLayer.DAO.SQLiteModele
@enduml